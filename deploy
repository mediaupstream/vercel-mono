#!/usr/bin/env bash

set -e

if ! [[ "$1" =~ ^(web|api)$ ]]; then
  echo "Please provide a valid package name. valid options: api, web" >&2
  exit 1
fi

GIT_COMMIT_SHA=${GIT_COMMIT_SHA:-$(git rev-parse HEAD)}
GIT_COMMIT_REF=${GIT_COMMIT_REF:-$(git symbolic-ref HEAD)}
GIT_COMMIT_TAGS=${GIT_COMMIT_TAGS:-$(git tag --points-at HEAD | tr '\\r\\n' ' ')}

deploy () {
  # VERCEL_TOKEN
  token="VpcyGrjb0uOvrXsxGiyhxWIe"
  # VEREL_ORG_ID
  orgId="s0u8XySVq3EH7yrs1IRNb3Hj"
  # VERCEL_PROJECT_ID
  projectId=""
  # Initial vercel cli args
  args=(
    "-t ${token} -c -C"
    "-b GIT_COMMIT_SHA=\"${GIT_COMMIT_SHA}\""
    "-b GIT_COMMIT_REF=\"${GIT_COMMIT_REF}\""
    "-e GIT_COMMIT_SHA=\"${GIT_COMMIT_SHA}\""
    "-e GIT_COMMIT_REF=\"${GIT_COMMIT_REF}\""
  )

  # deploying api?
  if [ $1 = "api" ]; then
    projectId="prj_LQmlubkLgUq9jNtGmAiS6Qp0Llyv"
  fi

  # deploying web?
  if [ $1 = "web" ]; then
    projectId="prj_1ov6CWEJ2FOEAdMmJAvrk4QQjHWx"
    # set API_URL as build/env vars for the vercel cli
    if [ -n "$API_URL" ]; then
      args+=(
        "-b API_URL=${API_URL}"
        "-e API_URL=${API_URL}"
      )
    else
      echo "Please provide API_URL" >&2
      return 1
    fi
  fi

  # production deploy?
  if [ -n "$PROD_RELEASE" ]; then
    args+=("--prod")
  fi

  echo ${args[@]} >&2

  deployment=$( \
    GIT_COMMIT_REF="${GIT_COMMIT_REF}" \
    GIT_COMMIT_SHA="${GIT_COMMIT_SHA}" \
    VERCEL_ORG_ID=${orgId} \
    VERCEL_PROJECT_ID=${projectId} \
    npx vercel ${args[@]})

  # return the deployment URL
  echo "$deployment"
}

echo $(deploy $1)
